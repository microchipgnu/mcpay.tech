{
  "id": "3ce38032-04b5-4421-9d83-1dd79f018600",
  "prevId": "5276ce79-0ef9-4047-830f-72ccde4846e0",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.account": {
      "name": "account",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "account_id": {
          "name": "account_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider_id": {
          "name": "provider_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "access_token": {
          "name": "access_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token": {
          "name": "refresh_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "id_token": {
          "name": "id_token",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "access_token_expires_at": {
          "name": "access_token_expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_token_expires_at": {
          "name": "refresh_token_expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "scope": {
          "name": "scope",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "password": {
          "name": "password",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "account_user_id_idx": {
          "name": "account_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "account_provider_idx": {
          "name": "account_provider_idx",
          "columns": [
            {
              "expression": "provider_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "account_user_id_users_id_fk": {
          "name": "account_user_id_users_id_fk",
          "tableFrom": "account",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.api_keys": {
      "name": "api_keys",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "key_hash": {
          "name": "key_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "permissions": {
          "name": "permissions",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "api_key_user_id_idx": {
          "name": "api_key_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "api_key_active_idx": {
          "name": "api_key_active_idx",
          "columns": [
            {
              "expression": "active",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "api_key_expires_at_idx": {
          "name": "api_key_expires_at_idx",
          "columns": [
            {
              "expression": "expires_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "api_keys_user_id_users_id_fk": {
          "name": "api_keys_user_id_users_id_fk",
          "tableFrom": "api_keys",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "api_keys_key_hash_unique": {
          "name": "api_keys_key_hash_unique",
          "nullsNotDistinct": false,
          "columns": [
            "key_hash"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.mcp_servers": {
      "name": "mcp_servers",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "server_id": {
          "name": "server_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "mcp_origin": {
          "name": "mcp_origin",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "creator_id": {
          "name": "creator_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "receiver_address": {
          "name": "receiver_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "require_auth": {
          "name": "require_auth",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "auth_headers": {
          "name": "auth_headers",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'active'"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "mcp_server_status_idx": {
          "name": "mcp_server_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_server_creator_idx": {
          "name": "mcp_server_creator_idx",
          "columns": [
            {
              "expression": "creator_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_server_created_at_idx": {
          "name": "mcp_server_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_server_status_created_idx": {
          "name": "mcp_server_status_created_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mcp_servers_creator_id_users_id_fk": {
          "name": "mcp_servers_creator_id_users_id_fk",
          "tableFrom": "mcp_servers",
          "tableTo": "users",
          "columnsFrom": [
            "creator_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "mcp_servers_server_id_unique": {
          "name": "mcp_servers_server_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "server_id"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.mcp_tools": {
      "name": "mcp_tools",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "server_id": {
          "name": "server_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "input_schema": {
          "name": "input_schema",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "output_schema": {
          "name": "output_schema",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'{}'::jsonb"
        },
        "is_monetized": {
          "name": "is_monetized",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "pricing": {
          "name": "pricing",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'active'"
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "mcp_tool_server_id_idx": {
          "name": "mcp_tool_server_id_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_tool_name_idx": {
          "name": "mcp_tool_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_tool_status_idx": {
          "name": "mcp_tool_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_tool_server_name_idx": {
          "name": "mcp_tool_server_name_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "mcp_tool_monetized_idx": {
          "name": "mcp_tool_monetized_idx",
          "columns": [
            {
              "expression": "is_monetized",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mcp_tools_server_id_mcp_servers_id_fk": {
          "name": "mcp_tools_server_id_mcp_servers_id_fk",
          "tableFrom": "mcp_tools",
          "tableTo": "mcp_servers",
          "columnsFrom": [
            "server_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.payments": {
      "name": "payments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "tool_id": {
          "name": "tool_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "amount_raw": {
          "name": "amount_raw",
          "type": "numeric(38, 0)",
          "primaryKey": false,
          "notNull": true
        },
        "token_decimals": {
          "name": "token_decimals",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "network": {
          "name": "network",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "transaction_hash": {
          "name": "transaction_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'pending'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "settled_at": {
          "name": "settled_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "signature": {
          "name": "signature",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "payment_data": {
          "name": "payment_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "payment_tool_id_idx": {
          "name": "payment_tool_id_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "payment_user_id_idx": {
          "name": "payment_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "payment_status_idx": {
          "name": "payment_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "payment_created_at_idx": {
          "name": "payment_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "payment_network_idx": {
          "name": "payment_network_idx",
          "columns": [
            {
              "expression": "network",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "payment_tool_user_idx": {
          "name": "payment_tool_user_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "payments_tool_id_mcp_tools_id_fk": {
          "name": "payments_tool_id_mcp_tools_id_fk",
          "tableFrom": "payments",
          "tableTo": "mcp_tools",
          "columnsFrom": [
            "tool_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "payments_user_id_users_id_fk": {
          "name": "payments_user_id_users_id_fk",
          "tableFrom": "payments",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "payments_transaction_hash_unique": {
          "name": "payments_transaction_hash_unique",
          "nullsNotDistinct": false,
          "columns": [
            "transaction_hash"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {
        "amount_raw_positive_check": {
          "name": "amount_raw_positive_check",
          "value": "\"amount_raw\" >= 0"
        }
      },
      "isRLSEnabled": false
    },
    "public.proofs": {
      "name": "proofs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "tool_id": {
          "name": "tool_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "server_id": {
          "name": "server_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "is_consistent": {
          "name": "is_consistent",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "confidence_score": {
          "name": "confidence_score",
          "type": "numeric(3, 2)",
          "primaryKey": false,
          "notNull": true
        },
        "execution_url": {
          "name": "execution_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "execution_method": {
          "name": "execution_method",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "execution_headers": {
          "name": "execution_headers",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "execution_params": {
          "name": "execution_params",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "execution_result": {
          "name": "execution_result",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "execution_timestamp": {
          "name": "execution_timestamp",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "ai_evaluation": {
          "name": "ai_evaluation",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "inconsistencies": {
          "name": "inconsistencies",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "web_proof_presentation": {
          "name": "web_proof_presentation",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notary_url": {
          "name": "notary_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "proof_metadata": {
          "name": "proof_metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "replay_execution_result": {
          "name": "replay_execution_result",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "replay_execution_timestamp": {
          "name": "replay_execution_timestamp",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'verified'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "verification_type": {
          "name": "verification_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'execution'"
        }
      },
      "indexes": {
        "proof_tool_id_idx": {
          "name": "proof_tool_id_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_server_id_idx": {
          "name": "proof_server_id_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_user_id_idx": {
          "name": "proof_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_status_idx": {
          "name": "proof_status_idx",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_created_at_idx": {
          "name": "proof_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_is_consistent_idx": {
          "name": "proof_is_consistent_idx",
          "columns": [
            {
              "expression": "is_consistent",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_confidence_score_idx": {
          "name": "proof_confidence_score_idx",
          "columns": [
            {
              "expression": "confidence_score",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_verification_type_idx": {
          "name": "proof_verification_type_idx",
          "columns": [
            {
              "expression": "verification_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_tool_created_idx": {
          "name": "proof_tool_created_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "proof_server_consistent_idx": {
          "name": "proof_server_consistent_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "is_consistent",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "proofs_tool_id_mcp_tools_id_fk": {
          "name": "proofs_tool_id_mcp_tools_id_fk",
          "tableFrom": "proofs",
          "tableTo": "mcp_tools",
          "columnsFrom": [
            "tool_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "proofs_server_id_mcp_servers_id_fk": {
          "name": "proofs_server_id_mcp_servers_id_fk",
          "tableFrom": "proofs",
          "tableTo": "mcp_servers",
          "columnsFrom": [
            "server_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "proofs_user_id_users_id_fk": {
          "name": "proofs_user_id_users_id_fk",
          "tableFrom": "proofs",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {
        "confidence_score_range_check": {
          "name": "confidence_score_range_check",
          "value": "\"confidence_score\" >= 0 AND \"confidence_score\" <= 1"
        }
      },
      "isRLSEnabled": false
    },
    "public.server_ownership": {
      "name": "server_ownership",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "server_id": {
          "name": "server_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'viewer'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "granted_by": {
          "name": "granted_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {
        "server_ownership_server_user_idx": {
          "name": "server_ownership_server_user_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "server_ownership_server_id_idx": {
          "name": "server_ownership_server_id_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "server_ownership_user_id_idx": {
          "name": "server_ownership_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "server_ownership_active_idx": {
          "name": "server_ownership_active_idx",
          "columns": [
            {
              "expression": "active",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "server_ownership_server_id_mcp_servers_id_fk": {
          "name": "server_ownership_server_id_mcp_servers_id_fk",
          "tableFrom": "server_ownership",
          "tableTo": "mcp_servers",
          "columnsFrom": [
            "server_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "server_ownership_user_id_users_id_fk": {
          "name": "server_ownership_user_id_users_id_fk",
          "tableFrom": "server_ownership",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "server_ownership_granted_by_users_id_fk": {
          "name": "server_ownership_granted_by_users_id_fk",
          "tableFrom": "server_ownership",
          "tableTo": "users",
          "columnsFrom": [
            "granted_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.session": {
      "name": "session",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "ip_address": {
          "name": "ip_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "session_user_id_idx": {
          "name": "session_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "session_token_idx": {
          "name": "session_token_idx",
          "columns": [
            {
              "expression": "token",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "session_user_id_users_id_fk": {
          "name": "session_user_id_users_id_fk",
          "tableFrom": "session",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "session_token_unique": {
          "name": "session_token_unique",
          "nullsNotDistinct": false,
          "columns": [
            "token"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tool_usage": {
      "name": "tool_usage",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "tool_id": {
          "name": "tool_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "request_data": {
          "name": "request_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "response_status": {
          "name": "response_status",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "execution_time_ms": {
          "name": "execution_time_ms",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "ip_address": {
          "name": "ip_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "result": {
          "name": "result",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "tool_usage_tool_id_idx": {
          "name": "tool_usage_tool_id_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tool_usage_user_id_idx": {
          "name": "tool_usage_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tool_usage_timestamp_idx": {
          "name": "tool_usage_timestamp_idx",
          "columns": [
            {
              "expression": "timestamp",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tool_usage_status_idx": {
          "name": "tool_usage_status_idx",
          "columns": [
            {
              "expression": "response_status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tool_usage_tool_timestamp_idx": {
          "name": "tool_usage_tool_timestamp_idx",
          "columns": [
            {
              "expression": "tool_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "timestamp",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "tool_usage_tool_id_mcp_tools_id_fk": {
          "name": "tool_usage_tool_id_mcp_tools_id_fk",
          "tableFrom": "tool_usage",
          "tableTo": "mcp_tools",
          "columnsFrom": [
            "tool_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "tool_usage_user_id_users_id_fk": {
          "name": "tool_usage_user_id_users_id_fk",
          "tableFrom": "tool_usage",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_wallets": {
      "name": "user_wallets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "wallet_address": {
          "name": "wallet_address",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "wallet_type": {
          "name": "wallet_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "provider": {
          "name": "provider",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "blockchain": {
          "name": "blockchain",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "architecture": {
          "name": "architecture",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_primary": {
          "name": "is_primary",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "wallet_metadata": {
          "name": "wallet_metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "external_wallet_id": {
          "name": "external_wallet_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "external_user_id": {
          "name": "external_user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "last_used_at": {
          "name": "last_used_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "user_wallets_user_id_idx": {
          "name": "user_wallets_user_id_idx",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_wallet_address_idx": {
          "name": "user_wallets_wallet_address_idx",
          "columns": [
            {
              "expression": "wallet_address",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_type_idx": {
          "name": "user_wallets_type_idx",
          "columns": [
            {
              "expression": "wallet_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_blockchain_idx": {
          "name": "user_wallets_blockchain_idx",
          "columns": [
            {
              "expression": "blockchain",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_architecture_idx": {
          "name": "user_wallets_architecture_idx",
          "columns": [
            {
              "expression": "architecture",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_primary_idx": {
          "name": "user_wallets_primary_idx",
          "columns": [
            {
              "expression": "is_primary",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_active_idx": {
          "name": "user_wallets_active_idx",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_provider_idx": {
          "name": "user_wallets_provider_idx",
          "columns": [
            {
              "expression": "provider",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_external_id_idx": {
          "name": "user_wallets_external_id_idx",
          "columns": [
            {
              "expression": "external_wallet_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_primary_unique": {
          "name": "user_wallets_primary_unique",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "where": "is_primary = true",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_wallets_unique_combination": {
          "name": "user_wallets_unique_combination",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "wallet_address",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "provider",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "wallet_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_wallets_user_id_users_id_fk": {
          "name": "user_wallets_user_id_users_id_fk",
          "tableFrom": "user_wallets",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "wallet_address": {
          "name": "wallet_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "email_verified": {
          "name": "email_verified",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "image": {
          "name": "image",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "display_name": {
          "name": "display_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "last_login_at": {
          "name": "last_login_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "user_wallet_address_idx": {
          "name": "user_wallet_address_idx",
          "columns": [
            {
              "expression": "wallet_address",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_email_idx": {
          "name": "user_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_last_login_idx": {
          "name": "user_last_login_idx",
          "columns": [
            {
              "expression": "last_login_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_wallet_address_unique": {
          "name": "users_wallet_address_unique",
          "nullsNotDistinct": false,
          "columns": [
            "wallet_address"
          ]
        },
        "users_email_unique": {
          "name": "users_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.verification": {
      "name": "verification",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "identifier": {
          "name": "identifier",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "verification_identifier_idx": {
          "name": "verification_identifier_idx",
          "columns": [
            {
              "expression": "identifier",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "verification_expires_at_idx": {
          "name": "verification_expires_at_idx",
          "columns": [
            {
              "expression": "expires_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.webhooks": {
      "name": "webhooks",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "server_id": {
          "name": "server_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "secret": {
          "name": "secret",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "events": {
          "name": "events",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "last_triggered_at": {
          "name": "last_triggered_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "failure_count": {
          "name": "failure_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        }
      },
      "indexes": {
        "webhook_server_id_idx": {
          "name": "webhook_server_id_idx",
          "columns": [
            {
              "expression": "server_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "webhook_active_idx": {
          "name": "webhook_active_idx",
          "columns": [
            {
              "expression": "active",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "webhook_failure_count_idx": {
          "name": "webhook_failure_count_idx",
          "columns": [
            {
              "expression": "failure_count",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "webhooks_server_id_mcp_servers_id_fk": {
          "name": "webhooks_server_id_mcp_servers_id_fk",
          "tableFrom": "webhooks",
          "tableTo": "mcp_servers",
          "columnsFrom": [
            "server_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.daily_activity": {
      "columns": {},
      "definition": "select activity_date as \"date\", COUNT(DISTINCT tool_usage.id) as \"total_requests\", COUNT(DISTINCT COALESCE(tool_usage.user_id, payments.user_id)) as \"unique_users\", COUNT(DISTINCT CASE WHEN payments.status = 'completed' THEN payments.id END) as \"total_payments\", AVG(tool_usage.execution_time_ms) as \"avg_response_time\", \n        CASE \n          WHEN COUNT(DISTINCT CASE WHEN payments.status = 'completed' AND payments.amount_raw IS NOT NULL THEN payments.id END) > 0 THEN\n            JSON_AGG(\n              DISTINCT JSONB_BUILD_OBJECT(\n                'currency', payments.currency,\n                'network', payments.network,\n                'decimals', payments.token_decimals,\n                'amount_raw', (\n                  SELECT SUM(p2.amount_raw::numeric)::text\n                  FROM payments p2\n                  WHERE DATE(p2.created_at) = dates.activity_date\n                    AND p2.status = 'completed'\n                    AND p2.currency = payments.currency\n                    AND p2.network = payments.network\n                    AND p2.token_decimals = payments.token_decimals\n                )\n              )\n            ) FILTER (WHERE payments.status = 'completed' AND payments.amount_raw IS NOT NULL)\n          ELSE NULL\n        END\n       as \"revenue_details\" from (\n      SELECT DISTINCT DATE(timestamp) as activity_date FROM tool_usage\n      UNION\n      SELECT DISTINCT DATE(created_at) as activity_date FROM payments\n    ) dates left join \"tool_usage\" on DATE(tool_usage.timestamp) = dates.activity_date left join \"payments\" on DATE(payments.created_at) = dates.activity_date group by activity_date order by activity_date DESC",
      "name": "daily_activity",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    },
    "public.daily_server_analytics": {
      "columns": {},
      "definition": "select mcp_servers.id as \"server_id\", server_dates.activity_date as \"date\", COUNT(DISTINCT tool_usage.id) as \"total_requests\", COUNT(DISTINCT COALESCE(tool_usage.user_id, payments.user_id)) as \"unique_users\", COUNT(DISTINCT CASE WHEN tool_usage.response_status NOT IN ('success', '200') THEN tool_usage.id END) as \"error_count\", AVG(tool_usage.execution_time_ms) as \"avg_response_time\", \n        CASE \n          WHEN COUNT(DISTINCT CASE WHEN payments.status = 'completed' AND payments.amount_raw IS NOT NULL THEN payments.id END) > 0 THEN\n            JSON_AGG(\n              DISTINCT JSONB_BUILD_OBJECT(\n                'currency', payments.currency,\n                'network', payments.network,\n                'decimals', payments.token_decimals,\n                'amount_raw', (\n                  SELECT SUM(p2.amount_raw::numeric)::text\n                  FROM payments p2\n                  JOIN mcp_tools t2 ON t2.id = p2.tool_id\n                  WHERE t2.server_id = mcp_servers.id\n                    AND DATE(p2.created_at) = server_dates.activity_date\n                    AND p2.status = 'completed'\n                    AND p2.currency = payments.currency\n                    AND p2.network = payments.network\n                    AND p2.token_decimals = payments.token_decimals\n                )\n              )\n            ) FILTER (WHERE payments.status = 'completed' AND payments.amount_raw IS NOT NULL)\n          ELSE NULL\n        END\n       as \"revenue_details\", COUNT(DISTINCT CASE WHEN payments.status = 'completed' THEN payments.id END) as \"total_payments\" from (\n      SELECT DISTINCT \n        mcp_servers.id as server_id,\n        dates.activity_date\n      FROM mcp_servers\n      CROSS JOIN (\n        SELECT DISTINCT DATE(timestamp) as activity_date FROM tool_usage\n        UNION\n        SELECT DISTINCT DATE(created_at) as activity_date FROM payments\n      ) dates\n    ) server_dates left join \"mcp_servers\" on mcp_servers.id = server_dates.server_id left join \"mcp_tools\" on mcp_tools.server_id = mcp_servers.id left join \"tool_usage\" on tool_usage.tool_id = mcp_tools.id AND DATE(tool_usage.timestamp) = server_dates.activity_date left join \"payments\" on payments.tool_id = mcp_tools.id AND DATE(payments.created_at) = server_dates.activity_date group by mcp_servers.id, server_dates.activity_date",
      "name": "daily_server_analytics",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    },
    "public.global_analytics": {
      "columns": {},
      "definition": "select COUNT(DISTINCT mcp_servers.id) as \"total_servers\", COUNT(DISTINCT CASE WHEN mcp_servers.status = 'active' THEN mcp_servers.id END) as \"active_servers\", COUNT(DISTINCT mcp_tools.id) as \"total_tools\", COUNT(DISTINCT CASE WHEN mcp_tools.is_monetized THEN mcp_tools.id END) as \"monetized_tools\", COUNT(DISTINCT tool_usage.id) as \"total_requests\", COUNT(DISTINCT CASE WHEN tool_usage.response_status IN ('success', '200') THEN tool_usage.id END) as \"successful_requests\", COUNT(DISTINCT COALESCE(tool_usage.user_id, payments.user_id)) as \"unique_users\", COUNT(DISTINCT CASE WHEN payments.status = 'completed' THEN payments.id END) as \"total_payments\", AVG(tool_usage.execution_time_ms) as \"avg_response_time\", \n        CASE \n          WHEN COUNT(DISTINCT CASE WHEN payments.status = 'completed' AND payments.amount_raw IS NOT NULL THEN payments.id END) > 0 THEN\n            JSON_AGG(\n              DISTINCT JSONB_BUILD_OBJECT(\n                'currency', payments.currency,\n                'network', payments.network,\n                'decimals', payments.token_decimals,\n                'amount_raw', (\n                  SELECT SUM(p2.amount_raw::numeric)::text\n                  FROM payments p2\n                  WHERE p2.status = 'completed'\n                    AND p2.currency = payments.currency\n                    AND p2.network = payments.network\n                    AND p2.token_decimals = payments.token_decimals\n                )\n              )\n            ) FILTER (WHERE payments.status = 'completed' AND payments.amount_raw IS NOT NULL)\n          ELSE NULL\n        END\n       as \"revenue_details\", COUNT(DISTINCT proofs.id) as \"total_proofs\", COUNT(DISTINCT CASE WHEN proofs.is_consistent THEN proofs.id END) as \"consistent_proofs\" from \"mcp_servers\" left join \"mcp_tools\" on mcp_tools.server_id = mcp_servers.id left join \"tool_usage\" on tool_usage.tool_id = mcp_tools.id left join \"payments\" on payments.tool_id = mcp_tools.id left join \"proofs\" on proofs.server_id = mcp_servers.id",
      "name": "global_analytics",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    },
    "public.server_summary_analytics": {
      "columns": {},
      "definition": "select mcp_servers.id as \"server_id\", mcp_servers.name as \"server_name\", COUNT(DISTINCT tool_usage.id) as \"total_requests\", COUNT(DISTINCT mcp_tools.id) as \"total_tools\", COUNT(DISTINCT CASE WHEN mcp_tools.is_monetized THEN mcp_tools.id END) as \"monetized_tools\", COUNT(DISTINCT COALESCE(tool_usage.user_id, payments.user_id)) as \"unique_users\", COUNT(DISTINCT CASE WHEN payments.status = 'completed' THEN payments.id END) as \"total_payments\", COUNT(DISTINCT CASE WHEN tool_usage.response_status NOT IN ('success', '200') THEN tool_usage.id END) as \"error_count\", AVG(tool_usage.execution_time_ms) as \"avg_response_time\", \n        CASE \n          WHEN COUNT(DISTINCT tool_usage.id) > 0 THEN\n            (COUNT(DISTINCT CASE WHEN tool_usage.response_status IN ('success', '200') THEN tool_usage.id END)::float / COUNT(DISTINCT tool_usage.id)) * 100\n          ELSE 0\n        END\n       as \"success_rate\", \n        CASE \n          WHEN COUNT(DISTINCT CASE WHEN payments.status = 'completed' AND payments.amount_raw IS NOT NULL THEN payments.id END) > 0 THEN\n            JSON_AGG(\n              DISTINCT JSONB_BUILD_OBJECT(\n                'currency', payments.currency,\n                'network', payments.network,\n                'decimals', payments.token_decimals,\n                'amount_raw', (\n                  SELECT SUM(p2.amount_raw::numeric)::text\n                  FROM payments p2\n                  JOIN mcp_tools t2 ON t2.id = p2.tool_id\n                  WHERE t2.server_id = mcp_servers.id\n                    AND p2.status = 'completed'\n                    AND p2.currency = payments.currency\n                    AND p2.network = payments.network\n                    AND p2.token_decimals = payments.token_decimals\n                )\n              )\n            ) FILTER (WHERE payments.status = 'completed' AND payments.amount_raw IS NOT NULL)\n          ELSE NULL\n        END\n       as \"revenue_details\", \n        COUNT(DISTINCT CASE \n          WHEN tool_usage.timestamp > NOW() - INTERVAL '30 days' \n          THEN tool_usage.id \n        END)\n       as \"recent_requests\", \n        COUNT(DISTINCT CASE \n          WHEN payments.created_at > NOW() - INTERVAL '30 days' AND payments.status = 'completed' \n          THEN payments.id \n        END)\n       as \"recent_payments\", \n        GREATEST(\n          MAX(tool_usage.timestamp),\n          MAX(payments.created_at)\n        )\n       as \"last_activity\" from \"mcp_servers\" left join \"mcp_tools\" on mcp_tools.server_id = mcp_servers.id left join \"tool_usage\" on tool_usage.tool_id = mcp_tools.id left join \"payments\" on payments.tool_id = mcp_tools.id group by mcp_servers.id, mcp_servers.name",
      "name": "server_summary_analytics",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    },
    "public.tool_analytics": {
      "columns": {},
      "definition": "select mcp_tools.id as \"tool_id\", mcp_tools.name as \"tool_name\", mcp_tools.server_id as \"server_id\", mcp_tools.is_monetized as \"is_monetized\", COUNT(DISTINCT tool_usage.id) as \"total_requests\", COUNT(DISTINCT CASE WHEN tool_usage.response_status IN ('success', '200') THEN tool_usage.id END) as \"successful_requests\", COUNT(DISTINCT tool_usage.user_id) as \"unique_users\", AVG(tool_usage.execution_time_ms) as \"avg_response_time\", COUNT(DISTINCT CASE WHEN payments.status = 'completed' THEN payments.id END) as \"total_payments\", \n        CASE \n          WHEN COUNT(DISTINCT CASE WHEN payments.status = 'completed' AND payments.amount_raw IS NOT NULL THEN payments.id END) > 0 THEN\n            JSON_AGG(\n              DISTINCT JSONB_BUILD_OBJECT(\n                'currency', payments.currency,\n                'network', payments.network,\n                'decimals', payments.token_decimals,\n                'amount_raw', (\n                  SELECT SUM(p2.amount_raw::numeric)::text\n                  FROM payments p2\n                  WHERE p2.tool_id = mcp_tools.id\n                    AND p2.status = 'completed'\n                    AND p2.currency = payments.currency\n                    AND p2.network = payments.network\n                    AND p2.token_decimals = payments.token_decimals\n                )\n              )\n            ) FILTER (WHERE payments.status = 'completed' AND payments.amount_raw IS NOT NULL)\n          ELSE NULL\n        END\n       as \"revenue_details\", MAX(tool_usage.timestamp) as \"last_used\", \n        COUNT(DISTINCT CASE \n          WHEN tool_usage.timestamp > NOW() - INTERVAL '30 days' \n          THEN tool_usage.id \n        END)\n       as \"recent_requests\" from \"mcp_tools\" left join \"tool_usage\" on tool_usage.tool_id = mcp_tools.id left join \"payments\" on payments.tool_id = mcp_tools.id group by mcp_tools.id, mcp_tools.name, mcp_tools.server_id, mcp_tools.is_monetized",
      "name": "tool_analytics",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    }
  },
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}